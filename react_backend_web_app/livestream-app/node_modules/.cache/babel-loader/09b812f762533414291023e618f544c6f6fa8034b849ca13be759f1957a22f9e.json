{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kshit\\\\Desktop\\\\flutter_dev\\\\Sensors-App\\\\react_backend_web_app\\\\livestream-app\\\\src\\\\RandomValueComponent.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport { database, ref, onValue } from \"./FirebaseSettings\";\n\n// // Import the functions you need from the SDKs you need\n// import { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\n// // import { getDatabase } from \"firebase/database\";\n// import { getDatabase, ref, child, get } from \"firebase/database\";\n\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyB_Wj2j0oEChEN9CnKX6Pi47MQWhleIpCs\",\n//   authDomain: \"flutter-prep-bda5b.firebaseapp.com\",\n//   databaseURL: \"https://flutter-prep-bda5b-default-rtdb.firebaseio.com\",\n//   projectId: \"flutter-prep-bda5b\",\n//   storageBucket: \"flutter-prep-bda5b.appspot.com\",\n//   messagingSenderId: \"917185126462\",\n//   appId: \"1:917185126462:web:3a1fac91a412f96007f16f\",\n//   measurementId: \"G-G2X0P7Q0QE\"\n// };\n\n// // Initialize Firebase\n// const app = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\n// const db = ref(getDatabase(app));\n// get(child(db, `users/`)).then((snapshot) => {\n//     if (snapshot.exists()) {\n//       console.log(snapshot.val());\n//     } else {\n//       console.log(\"No data available\");\n//     }\n//   }).catch((error) => {\n//     console.error(error);\n//   });\n// async function getUsers(db) {\n//     const usersCol = collection(db, '/users');\n//     const userSnapshot = await getDocs(usersCol);\n//     console.log(userSnapshot);\n//     // const cityList = citySnapshot.docs.map(doc => doc.data());\n//     // return cityList;\n//   }\n//   getUsers(db);\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomValue = () => Math.floor(Math.random() * 100);\nconst RandomValueComponent = () => {\n  _s();\n  const [randomObject, setRandomObject] = useState([{\n    value: getRandomValue()\n  }]);\n\n  // useEffect(() => {\n  //   const intervalId = setInterval(() => {\n  //     //   setRandomObject({ value: getRandomValue() });\n  //     setRandomObject((prevValues) => {\n  //       const newValues = [...prevValues, { value: getRandomValue() }];\n  //       if (newValues.length > 200) {\n  //         newValues.shift();\n  //       }\n  //       return newValues;\n  //     });\n  //   }, 50); // Update every second\n\n  //   return () => clearInterval(intervalId); // Cleanup interval on component unmount\n  // }, []);\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [accData, setAccData] = useState(null);\n  useEffect(() => {\n    const dataRef = ref(database, \"users\"); // Change to your data path\n\n    const unsubscribe = onValue(dataRef, snapshot => {\n      setData(snapshot.val());\n      // console.log(data);\n      if (snapshot.val() !== null) {\n        setAccData(prevValues => {\n          const newValues = Object.values(snapshot.val().newrecording.accelerometer).map(entry => entry.data.x);\n          return newValues.slice(-5);\n        });\n        console.log(accData);\n      }\n      setLoading(false);\n    }, error => {\n      setError(error);\n      setLoading(false);\n    });\n    // console.log(typeof data);\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []); // Empty dependencies array ensures this runs once after initial render\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Random Values:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      datasetIdKey: \"id\",\n      data: {\n        labels: accData.map((item, index) => index),\n        datasets: [{\n          id: 1,\n          label: \"test_label 1 \",\n          //   data: [5, 6, 7],\n          data: accData\n        }\n        // {\n        //   id: 2,\n        //   label: \"test_label 2\",\n        //   data: [3, 2, 1],\n        // },\n        ]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(accData, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(RandomValueComponent, \"Sm/23xbIlrtIuxK6fmDtbjjRovE=\");\n_c = RandomValueComponent;\nexport default RandomValueComponent;\nvar _c;\n$RefreshReg$(_c, \"RandomValueComponent\");","map":{"version":3,"names":["useEffect","useState","Line","database","ref","onValue","jsxDEV","_jsxDEV","getRandomValue","Math","floor","random","RandomValueComponent","_s","randomObject","setRandomObject","value","data","setData","loading","setLoading","error","setError","accData","setAccData","dataRef","unsubscribe","snapshot","val","prevValues","newValues","Object","values","newrecording","accelerometer","map","entry","x","slice","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","message","datasetIdKey","labels","item","index","datasets","id","label","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/kshit/Desktop/flutter_dev/Sensors-App/react_backend_web_app/livestream-app/src/RandomValueComponent.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\nimport { database, ref, onValue } from \"./FirebaseSettings\";\r\n\r\n// // Import the functions you need from the SDKs you need\r\n// import { initializeApp } from \"firebase/app\";\r\n// import { getAnalytics } from \"firebase/analytics\";\r\n// // import { getDatabase } from \"firebase/database\";\r\n// import { getDatabase, ref, child, get } from \"firebase/database\";\r\n\r\n// const firebaseConfig = {\r\n//   apiKey: \"AIzaSyB_Wj2j0oEChEN9CnKX6Pi47MQWhleIpCs\",\r\n//   authDomain: \"flutter-prep-bda5b.firebaseapp.com\",\r\n//   databaseURL: \"https://flutter-prep-bda5b-default-rtdb.firebaseio.com\",\r\n//   projectId: \"flutter-prep-bda5b\",\r\n//   storageBucket: \"flutter-prep-bda5b.appspot.com\",\r\n//   messagingSenderId: \"917185126462\",\r\n//   appId: \"1:917185126462:web:3a1fac91a412f96007f16f\",\r\n//   measurementId: \"G-G2X0P7Q0QE\"\r\n// };\r\n\r\n// // Initialize Firebase\r\n// const app = initializeApp(firebaseConfig);\r\n// const analytics = getAnalytics(app);\r\n// const db = ref(getDatabase(app));\r\n// get(child(db, `users/`)).then((snapshot) => {\r\n//     if (snapshot.exists()) {\r\n//       console.log(snapshot.val());\r\n//     } else {\r\n//       console.log(\"No data available\");\r\n//     }\r\n//   }).catch((error) => {\r\n//     console.error(error);\r\n//   });\r\n// async function getUsers(db) {\r\n//     const usersCol = collection(db, '/users');\r\n//     const userSnapshot = await getDocs(usersCol);\r\n//     console.log(userSnapshot);\r\n//     // const cityList = citySnapshot.docs.map(doc => doc.data());\r\n//     // return cityList;\r\n//   }\r\n//   getUsers(db);\r\n\r\nconst getRandomValue = () => Math.floor(Math.random() * 100);\r\n\r\nconst RandomValueComponent = () => {\r\n  const [randomObject, setRandomObject] = useState([\r\n    { value: getRandomValue() },\r\n  ]);\r\n\r\n  // useEffect(() => {\r\n  //   const intervalId = setInterval(() => {\r\n  //     //   setRandomObject({ value: getRandomValue() });\r\n  //     setRandomObject((prevValues) => {\r\n  //       const newValues = [...prevValues, { value: getRandomValue() }];\r\n  //       if (newValues.length > 200) {\r\n  //         newValues.shift();\r\n  //       }\r\n  //       return newValues;\r\n  //     });\r\n  //   }, 50); // Update every second\r\n\r\n  //   return () => clearInterval(intervalId); // Cleanup interval on component unmount\r\n  // }, []);\r\n\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [accData, setAccData] = useState(null);\r\n  useEffect(() => {\r\n    const dataRef = ref(database, \"users\"); // Change to your data path\r\n\r\n    const unsubscribe = onValue(\r\n      dataRef,\r\n      (snapshot) => {\r\n        setData(snapshot.val());\r\n        // console.log(data);\r\n        if (snapshot.val() !== null) {\r\n         setAccData( (prevValues) =>  { const newValues = Object.values(snapshot.val().newrecording.accelerometer).map(\r\n          (entry) => entry.data.x\r\n        );  return newValues.slice(-5); });\r\n          console.log(accData);\r\n        }\r\n\r\n        setLoading(false);\r\n      },\r\n      (error) => {\r\n        setError(error);\r\n        setLoading(false);\r\n      }\r\n    );\r\n    // console.log(typeof data);\r\n    // Cleanup subscription on unmount\r\n    return () => unsubscribe();\r\n  }, []); // Empty dependencies array ensures this runs once after initial render\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error.message}</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Random Values:</h1>\r\n      {/* <ul>\r\n            {randomObject.map((item, index) => (\r\n            <li key={index}>{item.value}</li>\r\n            ))}\r\n        </ul> */}\r\n      <Line\r\n        datasetIdKey=\"id\"\r\n        data={{\r\n          labels: accData.map((item, index) => index),\r\n          datasets: [\r\n            {\r\n              id: 1,\r\n              label: \"test_label 1 \",\r\n              //   data: [5, 6, 7],\r\n              data: accData,\r\n            },\r\n            // {\r\n            //   id: 2,\r\n            //   label: \"test_label 2\",\r\n            //   data: [3, 2, 1],\r\n            // },\r\n          ],\r\n        }}\r\n      />\r\n      {/* {console.log(Object.values(data.newrecording.accelerometer).map((entry) => entry.data.x))} */}\r\n      {/* <pre>{JSON.stringify(data, null, 2)}</pre> */}\r\n      {/* <pre>{JSON.stringify(accData, null, 2)}</pre> */}\r\n      <pre>{JSON.stringify(accData, null, 2)}</pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomValueComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}