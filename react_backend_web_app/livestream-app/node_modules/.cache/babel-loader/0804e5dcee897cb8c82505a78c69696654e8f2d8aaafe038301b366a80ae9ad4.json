{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { database, ref, onValue } from \"./FirebaseSettings\";\nconst useFetchStream = sessionid => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  if (sessionid !== null) {\n    console.log(\"session id is not null\");\n  } else {\n    console.log(\"session id is not passed\");\n  }\n  useEffect(() => {\n    const abortCont = new AbortController();\n    if (sessionid !== null) {\n      const dataRef = ref(database, \"users/\" + sessionid);\n    } else {\n      const dataRef = ref(database, \"users\");\n    } // Change to your data path}\n    const subscribeEvent = onValue(dataRef, snapshot => {\n      setData(snapshot.val());\n      setIsPending(false);\n    }, error => {\n      setError(error);\n      setIsPending(false);\n    });\n    return () => subscribeEvent();\n  }, []);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetchStream, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\nexport default useFetchStream;","map":{"version":3,"names":["useState","useEffect","database","ref","onValue","useFetchStream","sessionid","_s","data","setData","isPending","setIsPending","error","setError","console","log","abortCont","AbortController","dataRef","subscribeEvent","snapshot","val"],"sources":["C:/Users/kshit/Desktop/flutter_dev/Sensors-App/react_backend_web_app/livestream-app/src/useFetchStream.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { database, ref, onValue } from \"./FirebaseSettings\";\r\nconst useFetchStream = (sessionid) => {\r\n  const [data, setData] = useState(null);\r\n  const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  if (sessionid !== null) {\r\n    console.log(\"session id is not null\");\r\n  } else {\r\n    console.log(\"session id is not passed\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    const abortCont = new AbortController();\r\n    if (sessionid !== null) {\r\n      const dataRef = ref(database, \"users/\" + sessionid);\r\n    } else {\r\n      const dataRef = ref(database, \"users\");\r\n    } // Change to your data path}\r\n    const subscribeEvent = onValue(\r\n      dataRef,\r\n      (snapshot) => {\r\n        setData(snapshot.val());\r\n\r\n        setIsPending(false);\r\n      },\r\n      (error) => {\r\n        setError(error);\r\n        setIsPending(false);\r\n      }\r\n    );\r\n    return () => subscribeEvent();\r\n  }, []);\r\n  return { data, isPending, error };\r\n};\r\n\r\nexport default useFetchStream;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,EAAEC,GAAG,EAAEC,OAAO,QAAQ,oBAAoB;AAC3D,MAAMC,cAAc,GAAIC,SAAS,IAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExC,IAAIM,SAAS,KAAK,IAAI,EAAE;IACtBQ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC,MAAM;IACLD,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EACzC;EAEAd,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC;IACvC,IAAIX,SAAS,KAAK,IAAI,EAAE;MACtB,MAAMY,OAAO,GAAGf,GAAG,CAACD,QAAQ,EAAE,QAAQ,GAAGI,SAAS,CAAC;IACrD,CAAC,MAAM;MACL,MAAMY,OAAO,GAAGf,GAAG,CAACD,QAAQ,EAAE,OAAO,CAAC;IACxC,CAAC,CAAC;IACF,MAAMiB,cAAc,GAAGf,OAAO,CAC5Bc,OAAO,EACNE,QAAQ,IAAK;MACZX,OAAO,CAACW,QAAQ,CAACC,GAAG,CAAC,CAAC,CAAC;MAEvBV,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,EACAC,KAAK,IAAK;MACTC,QAAQ,CAACD,KAAK,CAAC;MACfD,YAAY,CAAC,KAAK,CAAC;IACrB,CACF,CAAC;IACD,OAAO,MAAMQ,cAAc,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EACN,OAAO;IAAEX,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAACL,EAAA,CAjCIF,cAAc;AAmCpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}